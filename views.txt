Task1:
Create a SQL query to return next data ordered by city and then by name:
| Employy Id | Employee Full Name | Title | City |
[Employee Full Name] - First Name and Last Name.

Solution:
select EmployeeID, concat(FirstName, LastName) AS FullName, Title, City from Employees order by City
select EmployeeID, concat(FirstName, LastName) AS FullName, Title, City from Employees order by FullName

Task2:
Create a query to return all customers from USA without Fax:
| CustomerId | CompanyName |

Solution:
select CustomerID, CompanyName from Customers where Country = 'USA' and Fax IS NULL

Task3:
Create a query to return:
| Customer Id | Total number of Orders | % of all orders |
order data by % - higher percent at the top.

Solution:
select C.CustomerID, count(O.OrderID) as TotalNumberOfOrders, 
	cast ((count(O.OrderID)*100) as float)/cast((select count(*) from Orders) as float) as PercentOfAllOrders from  Customers C 
	join Orders O on O.CustomerID=C.CustomerID 
	group by C.CustomerID
	order by PercentOfAllOrders DESC

Task4:
Return all products where product name starts with 'A', 'B', .... 'F' ordered by name.
| ProductId | ProductName | QuantityPerUnit |

Solution:
select ProductID,ProductName,QuantityPerUnit from Products 
	order by ProductName

Task5:
Create a query to return all products with category and supplier company names:
| ProductName | CategoryName | SupplierCompanyName |

Solution:
select P.ProductName, C.CategoryName, S.CompanyName as SupplierCompanyName from Products P 
	join Categories C on P.CategoryID=C.CategoryID
	join Suppliers S on P.SupplierID=S.SupplierID
	

Task6:
Create a query to return a list ordered by order id descending:
| Order Id | Order Total Price | Total Order Discount, % |

Solution:
select OrderID, sum(UnitPrice) as TotalCount, sum(Discount)*100 as TotalDiscount from [Order Details]
	group by OrderId 
	order by OrderID DESC

Task7:
Create a query to return all employees and full name of person to whom this employee reports to:
| EmployeeId | FullName | ReportsTo |
Full Name - title of courtesy with full name.
Order data by first column.
Reports To - Full name. If the employee does not report to anybody leave "-" in the column.

Solution:
select E.EmployeeID, concat(E.FirstName, E.LastName) as FullName, ISNULL((EM.FirstName+''+EM.LastName),'-') as ReportsTo 
	from Employees E
	left join Employees EM on E.ReportsTo = EM.EmployeeID 

Task8:
Create a query to return:
| CategoryName | TotalNumberOfProducts |

Solution:
select C.CategoryName, sum(P.ProductID) as Total from Categories C
	join Products P on C.CategoryID=P.CategoryID
	group by C.CategoryName

Task9:
Create a SQL query to find those customers whose contact name containing 
the 1st character is 'F' and the 4th character is 'n' and rests may be any character.
| CustomerId | ContactName |

Solution:
select CustomerID, ContactName from Customers
where ContactName like 'F__n%'

Task10:
Write a query to get discontinued Product list:
| ProductId | Name | 

Solution:
select P.ProductID, P.ProductName from Products P
where P.Discontinued <> 0
order by P.ProductID

Task11:
Create a SQL query to get Product list (name, unit price) where products cost between $5 and $15:
| ProductName | UnitPrice |

Solution:
select P.ProductName, O.UnitPrice from Products P
join [Order Details] O on O.ProductID=P.ProductID
where O.UnitPrice between 5 and 15

Task12:
Write a SQL query to get Product list of twenty most expensive products:
| ProductName | UnitPrice |
Order products by price.

Solution:
select top 20 ProductName, UnitPrice from Products
order by UnitPrice DESC

Task13:
Create a SQL query to count current and discontinued products:
| TotalOfCurrentProducts | TotalOfDiscontinuedProducts |

Solution:
select count(Discontinued) as TotalOfCurrentProducts,
(select count(Discontinued) from Products where Discontinued <> 0) as TotalOfDiscontinuedProducts
from Products 

Task14:
Create a SQL query to get Product list of stock is less than the quantity on order:
| ProductName | UnitsInOrder| UnitsInStock |

Solution:
select P.ProductName, P.UnitsInStock, P.UnitsOnOrder from Products P
where P.unitsInStock < P.UnitsOnOrder

Task15:
Create a SQL query to return the total number of orders for every month in 1997 year:
| January | February | March | April | May | June | July | August | September | November | December |

Solution:

select DATENAME(MONTH,OrderDate) as OrderMonth, count(OrderID) as TotalNumberOfOrders from Orders
where OrderDate between '1997-01-01' and '1997-12-31'
group by DATENAME(MONTH,OrderDate)
order by OrderMonth

Task16:
Create a SQL query to return all orders where ship postal code is provided:
| OrderId | CustomerId | ShipCountry |

Solution: 
select OrderId,CustomerID, ShipCountry from Orders
where ShipPostalCode IS NOT NULL 

Task17:
Create SQL query to display the average price of each categories's products:
| CategoryName | AvgPrice |

Solution:
select C.CategoryName, avg(P.UnitPrice) as AvgPrice from Categories C
join Products P on C.CategoryID=P.CategoryID
group by C.CategoryName
